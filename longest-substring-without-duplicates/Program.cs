public class Solution{    // find the Longest substring without duplicating character    // zxyzxyz -> xyz (not both xyzxyz)    // zxy    // xyz    // xyzx -> false    // fjkakdshjkf    // fjkak    // akdshj    // dshjkf - max 6    public int LengthOfLongestSubstring(string s)    {        var set = new HashSet<char>();        int l = 0, r = 0, maxLength = 0;        for (r = 0; r < s.Length; r++)        {            if (!set.Contains(s[r]))            {                set.Add(s[r]);
            }            else            {                maxLength = Math.Max(maxLength, set.Count);                // fjkak let l++ till s[l] = s[r] = 'k'
                while (set.Contains(s[r]))                {                    set.Remove(s[l]);                    l++;                }                set.Add(s[r]);            }        }                return Math.Max(set.Count,maxLength);    }    public static void Main()    {        Console.WriteLine(new Solution().LengthOfLongestSubstring("zxyzxyz"));        Console.WriteLine(new Solution().LengthOfLongestSubstring("fjkakdshjkf"));        Console.WriteLine(new Solution().LengthOfLongestSubstring("pwwkew"));        Console.WriteLine(new Solution().LengthOfLongestSubstring("xxxx"));        Console.WriteLine(new Solution().LengthOfLongestSubstring("1a2b3c4d5e6f7g8h9i0j1k2l3m4n5o6p7q8r9s0t1u2v3w4x5y6z7A8B9C0D1E2F3G4H5I6J7K8L9M0N1O2P3Q4R5S6T7U8V9W0X1Y2Z3"));    }}